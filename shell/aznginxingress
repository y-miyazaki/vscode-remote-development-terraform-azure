#!/bin/bash
# ------------------------------------------------------------------------
# see static ip
# https://docs.microsoft.com/ja-jp/azure/aks/ingress-static-ip
# Install nginx-ingress and allocate ip address.
# see install information
# https://docs.microsoft.com/ja-jp/azure/aks/ingress-tls
# ------------------------------------------------------------------------
set -e
NAME=`basename $0`
# see versions
# https://github.com/jetstack/cert-manager/releases
CERT_MANAGER_VERSION=0.11
CERT_MANAGER_NAMESPACE=cert-manager
CERT_MANAGER_RELEASE=cert-manager

function usage () {
  echo "# ------------------------------------------------------------------------"
  echo "# 1.install nginx-ingress and allocate ip address."
  echo "# 2.delete nginx-ingress."
  echo "# ------------------------------------------------------------------------"
  echo "USAGE: ${NAME} install {ip} {namespace} {release name} {ssl(1|0)}" 1>&2
  echo "ex: ${NAME} install xxx.xxx.xxx.xxx default nginx-ingress 1" 1>&2
  echo "USAGE: ${NAME} uninstall {release name}" 1>&2
  echo "ex: ${NAME} uninstall nginx-ingress" 1>&2
  exit 1
}

# Nginx-Ingress IP Address
CMD=$1
if [ "$CMD" = "install" ]; then
  # Nginx-Ingress IP Address
  IP=$2
  if [ -z $IP ]; then
    usage
  fi

  # Nginx-Ingress Namespace
  NAMESPACE=$3
  if [ -z $NAMESPACE ]; then
    usage
  fi

  # Nginx-Ingress Relase Name
  RELEASE_NAME=$4
  if [ -z $RELEASE_NAME ]; then
    usage
  fi

  # install cert-manager 
  CERT_MANAGER=$5
  if [ -z $CERT_MANAGER ]; then
    usage
  fi

  # Create a namespace for your ingress resources
  WC=`kubectl get ns | grep "${NAMESPACE}" | wc -l`
  if [ $WC -eq 0 ]; then
    kubectl create namespace $NAMESPACE
  fi

  # Use Helm to deploy an NGINX ingress controller
  # https://docs.microsoft.com/ja-jp/azure/aks/ingress-tls#create-an-ingress-controller
  WC=`helm list | grep "${RELEASE_NAME}" | wc -l`
  if [ $WC -eq 0 ]; then
    helm install stable/nginx-ingress \
        --set controller.replicaCount=2 \
        --set controller.nodeSelector."beta\.kubernetes\.io/os"=linux \
        --set defaultBackend.nodeSelector."beta\.kubernetes\.io/os"=linux \
        --set controller.service.externalTrafficPolicy=Local \
        --set controller.service.loadBalancerIP="$IP" \
        --namespace $NAMESPACE \
        --name $RELEASE_NAME
  fi

  # cert manager for SSL
  WC=`helm list | grep "${CERT_MANAGER_RELEASE}" | wc -l`
  if [ $WC -eq 0 ]; then
    if [ $CERT_MANAGER -eq 1 ]; then
      # Install the CustomResourceDefinition resources separately
      # see document.
      # https://cert-manager.io/docs/installation/kubernetes/
      kubectl apply --validate=false -f https://raw.githubusercontent.com/jetstack/cert-manager/release-${CERT_MANAGER_VERSION}/deploy/manifests/00-crds.yaml
      # Create the namespace for cert-manager
      WC=`kubectl get ns | grep "${CERT_MANAGER_NAMESPACE}" | wc -l`
      if [ $WC -eq 0 ]; then
        kubectl create namespace $CERT_MANAGER_NAMESPACE
      fi
      # Label the cert-manager namespace to disable resource validation
      kubectl label namespace --overwrite $CERT_MANAGER_NAMESPACE certmanager.k8s.io/disable-validation=true
      # Add the Jetstack Helm repository
      helm repo add jetstack https://charts.jetstack.io
      # Update your local Helm chart repository cache
      helm repo update
      # Install the cert-manager Helm chart
      helm install \
        --name $CERT_MANAGER_RELEASE \
        --namespace $CERT_MANAGER_NAMESPACE \
        --version v${CERT_MANAGER_VERSION}.0 \
        jetstack/cert-manager
    fi
  fi

  # check service nginx ingress
  echo "# ------------------------------------------------------------------------"
  echo "# Nginx Ingress associates ip address now."
  echo "# Please check this following command."
  echo "# ------------------------------------------------------------------------"
  echo "kubectl get service -l app=nginx-ingress --namespace $NAMESPACE"

  # check certificate
  echo "# ------------------------------------------------------------------------"
  echo "# describe Certificate."
  echo "# Please check this following command."
  echo "# ------------------------------------------------------------------------"
  echo "kubectl describe certificate tls-secret --namespace $NAMESPACE"

elif [ "$CMD" = "uninstall" ]; then
  # Nginx-Ingress Relase Name
  if [ -z $2 ]; then
    usage
  else
    RELEASE_NAME=$2
  fi
  # delete nginx-ingress 
  helm delete --purge $RELEASE_NAME
  if [ "$NAMESPACE" != "default" ]; then
    helm delete ns $NAMESPACE
  fi
  helm delete --purge $CERT_MANAGER_RELEASE
  if [ "$CERT_MANAGER_NAMESPACE" != "default" ]; then
    helm delete ns $CERT_MANAGER_NAMESPACE
  fi
else
  usage
fi
